window.Gleam.initSearch([{"doc":"chess_glm","title":"chess_glm","content":"# chess_glm\r\n\r\n[![Hex Docs](https://img.shields.io/badge/hex-docs-ffaff3)](https://qinbeans.github.io/chess-glm/)\r\n[![test](https://github.com/Qinbeans/chess-glm/actions/workflows/test.yml/badge.svg)](https://github.com/Qinbeans/chess-glm/actions/workflows/test.yml)\r\n\r\nReimplementation of my [chess-htmx](https://github.com/Qinbeans/chess-htmx) project in Gleam. The original project was written in Go and used the [htmx](https://htmx.org/) library to create a web-based chess game.\r\n\r\nThis uses my DSL library [html-dsl](https://github.com/Qinbeans/html-dsl) to generate HTML.\r\n\r\n```sh\r\ngleam add chess_glm\r\n```\r\n\r\nFurther documentation can be found at &lt;https://qinbeans.github.io/chess-glm/&gt;.\r\n\r\n## Development\r\n\r\n```sh\r\ngleam run       # Run the project\r\ngleam test      # Run the tests\r\ngleam shell     # Run an Erlang shell\r\n\r\n# some project specific commands\r\npnpm dev        # Run the development server with live reload\r\npnpm build      # Build the project\r\n```\r\n","url":"index.html"},{"doc":"chess_glm/method","title":"get_method","content":"pub fn get_method(req: Request(Connection)) -&gt; String\n\nSynonyms:\nchess_glm/method.get_method\nchess_glm/method get_method","url":"chess_glm/method.html#get_method"},{"doc":"chess_glm/method","title":"chess_glm/method","content":"","url":"chess_glm/method.html"},{"doc":"chess_glm/components/navbar","title":"NavBar","content":"pub opaque type NavBar\n A struct that represents a navigation bar item\r\n  - `name` is the name of the item\r\n  - `url` is the url of the item\r\n\nSynonyms:\nchess_glm/components/navbar.NavBar\nchess_glm/components/navbar NavBar","url":"chess_glm/components/navbar.html#NavBar"},{"doc":"chess_glm/components/navbar","title":"get_name","content":"pub fn get_name(nav: NavBar) -&gt; String\n\nSynonyms:\nchess_glm/components/navbar.get_name\nchess_glm/components/navbar get_name","url":"chess_glm/components/navbar.html#get_name"},{"doc":"chess_glm/components/navbar","title":"get_url","content":"pub fn get_url(nav: NavBar) -&gt; String\n\nSynonyms:\nchess_glm/components/navbar.get_url\nchess_glm/components/navbar get_url","url":"chess_glm/components/navbar.html#get_url"},{"doc":"chess_glm/components/navbar","title":"new","content":"pub fn new(name: String, url: String) -&gt; NavBar\n A function that creates a `NavBar` item\r\n  - `@param` name: the name of the item\r\n  - `@param` url: the url of the item\r\n  - `@returns` the `NavBar` item\r\nSynonyms:\nchess_glm/components/navbar.new\nchess_glm/components/navbar new","url":"chess_glm/components/navbar.html#new"},{"doc":"chess_glm/components/navbar","title":"chess_glm/components/navbar","content":"","url":"chess_glm/components/navbar.html"},{"doc":"chess_glm/components/header","title":"header_component","content":"pub fn header_component(\n  current: String,\n  nav_list: List(NavBar),\n) -&gt; String\n A header component that takes a list of `NavBar` items and the current page\r\n  - `@param` current: the current page\r\n  - `@param` nav_list: the list of `NavBar` items\r\n  - `@returns` the header component\r\n &#39;@example&#39;\r\n \r\n let nav_list = [NavBar(&quot;Home&quot;, &quot;/&quot;), NavBar(&quot;Somewhere&quot;, &quot;/somewhere&quot;)]\r\n header_component(&quot;/&quot;, nav_list)\r\n \r\nSynonyms:\nchess_glm/components/header.header_component\nchess_glm/components/header header_component","url":"chess_glm/components/header.html#header_component"},{"doc":"chess_glm/components/header","title":"chess_glm/components/header","content":"","url":"chess_glm/components/header.html"},{"doc":"chess_glm/layouts/base","title":"base","content":"pub fn base(\n  current: String,\n  is_component: Bool,\n  description: String,\n  children: String,\n) -&gt; Html\n A base component that changes state based on the `is_component` parameter, resulting in an enum of either a `Component` or a `Html`\r\n  - `@param` current: the current page\r\n  - `@param` is_component: a boolean that indicates if the page is a component\r\n  - `@param` children: the children of the page\r\n  - `@returns` the base component\r\n &#39;@example&#39;\r\n \r\n base(&quot;/&quot;,True, &quot;This is the content&quot;)\r\n \r\nSynonyms:\nchess_glm/layouts/base.base\nchess_glm/layouts/base base","url":"chess_glm/layouts/base.html#base"},{"doc":"chess_glm/layouts/base","title":"chess_glm/layouts/base","content":"","url":"chess_glm/layouts/base.html"},{"doc":"chess_glm/mist_dsl/engine","title":"render_html","content":"pub fn render_html(\n  template: Html,\n  code: Int,\n) -&gt; Response(ResponseData)\n\nSynonyms:\nchess_glm/mist_dsl/engine.render_html\nchess_glm/mist_dsl/engine render_html","url":"chess_glm/mist_dsl/engine.html#render_html"},{"doc":"chess_glm/mist_dsl/engine","title":"chess_glm/mist_dsl/engine","content":"","url":"chess_glm/mist_dsl/engine.html"},{"doc":"chess_glm/routes/index","title":"render","content":"pub fn render(req: Request(Connection)) -&gt; Response(ResponseData)\n Renders the page for index\r\nSynonyms:\nchess_glm/routes/index.render\nchess_glm/routes/index render","url":"chess_glm/routes/index.html#render"},{"doc":"chess_glm/routes/index","title":"chess_glm/routes/index","content":"","url":"chess_glm/routes/index.html"},{"doc":"chess_glm/routes/somewhere","title":"render","content":"pub fn render(req: Request(Connection)) -&gt; Response(ResponseData)\n Render the page\r\nSynonyms:\nchess_glm/routes/somewhere.render\nchess_glm/routes/somewhere render","url":"chess_glm/routes/somewhere.html#render"},{"doc":"chess_glm/routes/somewhere","title":"chess_glm/routes/somewhere","content":"","url":"chess_glm/routes/somewhere.html"},{"doc":"chess_glm/routes/not_found","title":"render","content":"pub fn render(: Request(Connection)) -&gt; Response(ResponseData)\n Render a 404 response\r\nSynonyms:\nchess_glm/routes/not_found.render\nchess_glm/routes/not_found render","url":"chess_glm/routes/not_found.html#render"},{"doc":"chess_glm/routes/not_found","title":"chess_glm/routes/not_found","content":"","url":"chess_glm/routes/not_found.html"},{"doc":"chess_glm/routes/static","title":"serve_static","content":"pub fn serve_static(\n  req: Request(Connection),\n  path: String,\n) -&gt; Response(ResponseData)\n\nSynonyms:\nchess_glm/routes/static.serve_static\nchess_glm/routes/static serve_static","url":"chess_glm/routes/static.html#serve_static"},{"doc":"chess_glm/routes/static","title":"chess_glm/routes/static","content":"","url":"chess_glm/routes/static.html"},{"doc":"chess_glm/server","title":"router","content":"pub fn router(req: Request(Connection)) -&gt; Response(ResponseData)\n\nSynonyms:\nchess_glm/server.router\nchess_glm/server router","url":"chess_glm/server.html#router"},{"doc":"chess_glm/server","title":"chess_glm/server","content":"","url":"chess_glm/server.html"},{"doc":"chess_glm","title":"main","content":"pub fn main() -&gt; Nil\n\nSynonyms:\nchess_glm.main\nchess_glm main","url":"chess_glm.html#main"},{"doc":"chess_glm","title":"start_server","content":"pub fn start_server() -&gt; Result(Subject(Message), StartError)\n\nSynonyms:\nchess_glm.start_server\nchess_glm start_server","url":"chess_glm.html#start_server"},{"doc":"chess_glm","title":"chess_glm","content":"","url":"chess_glm.html"}]);